// https://github.com/junku901/machine_learning

const fs = require('fs');
const brain = require('brain');
const MAX_SAMPLES = Number(process.env.MAX_SAMPLES) || 10;
const MAX_TESTS = Number(process.env.MAX_TESTS) || 10;


// const net = new brain.NeuralNetwork({
//   hiddenLayers: [784]
// });
//
// const x = [
//   { input: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,255,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,250,253,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,248,253,167,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,247,253,208,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,207,253,235,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,209,253,253,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,254,253,238,170,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,210,254,253,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,209,253,254,240,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,253,253,254,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,206,254,254,198,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,253,196,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,203,253,248,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,188,253,245,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,253,253,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,240,253,195,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,220,253,253,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,253,253,253,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,251,253,250,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,218,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], output: { 1: 1 }},
//   { input: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,255,253,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,251,225,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,225,254,253,198,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,224,253,251,253,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,253,254,253,226,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,251,253,251,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,253,254,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,251,253,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,253,254,253,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,197,251,253,251,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,254,253,254,253,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,251,253,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,225,254,253,254,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,224,253,251,196,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,141,253,254,253,169,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,251,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,225,254,253,198,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,224,253,251,84,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,225,254,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,253,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], output: { 1: 1 }},
//   { input: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,131,42,0,0,0,0,0,0,0,0,0,174,198,3,0,0,0,0,0,0,0,0,0,0,0,0,0,44,254,141,0,0,0,0,0,0,0,0,12,180,190,3,0,0,0,0,0,0,0,0,0,0,0,0,0,162,254,90,0,0,0,0,0,0,0,50,242,254,75,0,0,0,0,0,0,0,0,0,0,0,0,0,4,171,250,184,0,0,0,0,0,0,0,10,233,243,62,0,0,0,0,0,0,0,0,0,0,0,0,0,16,209,238,50,0,0,0,0,0,0,0,100,255,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,254,233,41,0,0,0,0,0,0,60,198,254,82,0,0,0,0,0,0,0,0,0,0,0,0,0,26,173,254,254,195,168,168,168,168,128,106,182,254,254,216,8,0,0,0,0,0,0,0,0,0,0,0,0,89,254,254,254,254,254,254,254,254,254,254,254,254,255,232,10,0,0,0,0,0,0,0,0,0,0,0,75,224,254,254,254,254,254,213,198,198,216,254,254,254,151,42,0,0,0,0,0,0,0,0,0,0,0,4,77,254,254,254,244,167,68,18,0,0,73,234,232,143,7,0,0,0,0,0,0,0,0,0,0,0,0,108,254,254,254,244,94,0,0,0,0,0,206,254,161,0,0,0,0,0,0,0,0,0,0,0,0,0,2,172,254,254,209,93,0,0,0,0,0,59,220,254,125,0,0,0,0,0,0,0,0,0,0,0,0,0,2,159,254,247,68,0,0,0,0,0,0,99,254,227,25,0,0,0,0,0,0,0,0,0,0,0,0,0,4,195,239,39,0,0,0,0,0,0,58,224,215,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,95,0,0,0,0,0,0,23,198,254,225,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,224,254,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,248,254,186,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,143,254,224,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,220,254,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,224,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], output: { 4: 1 }},
//   { input: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,128,0,0,0,0,0,0,0,0,0,0,0,255,255,191,0,0,0,0,0,0,0,0,0,0,64,64,255,255,64,0,0,0,0,0,0,0,0,0,0,128,255,255,128,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,64,255,255,128,0,0,0,0,0,0,0,0,0,0,0,255,128,0,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,0,0,0,0,0,0,0,0,64,255,128,0,0,0,0,0,0,0,0,0,0,0,191,255,191,0,0,0,0,0,0,0,0,0,0,0,64,255,128,0,0,0,0,0,0,0,0,0,0,0,255,255,128,0,0,0,0,0,0,0,0,0,0,0,191,255,128,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,0,0,0,0,0,0,0,0,64,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,128,255,255,0,0,0,0,0,0,64,0,128,128,191,255,255,128,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,191,191,64,128,255,255,255,255,255,255,255,128,0,0,0,0,0,0,0,0,0,0,128,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,191,255,255,255,255,255,255,255,191,128,191,191,191,255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,128,191,128,128,0,0,0,0,0,0,0,128,255,255,191,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,191,191,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], output: { 4: 1 }},
//   { input: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,105,184,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,217,254,253,253,253,253,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,203,253,254,237,243,253,253,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,247,253,227,85,21,52,232,253,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,217,253,227,42,0,0,0,169,253,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,254,254,146,0,18,0,0,65,254,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,253,253,238,191,218,191,137,128,253,212,0,0,0,36,192,191,51,0,0,0,0,0,0,0,0,0,0,30,206,252,253,253,254,253,253,253,253,251,153,75,48,224,254,253,243,135,4,0,0,0,0,0,0,0,0,0,0,78,84,172,190,190,190,206,253,254,253,253,253,253,254,253,227,253,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,42,166,253,253,253,253,192,68,33,122,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,254,255,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,254,253,253,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,242,255,246,243,253,253,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,155,253,254,142,198,253,253,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,253,253,174,46,242,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,254,45,192,255,254,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,86,212,253,253,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,254,253,252,179,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,253,253,254,253,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,174,253,148,68,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], output: { 8: 1 }},
// ];
// net.train(x);
//
// const res = net.run([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,254,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,151,241,254,251,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,213,253,253,254,253,253,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,239,254,222,157,255,234,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,132,254,251,173,18,0,254,242,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,180,253,254,173,0,0,0,254,253,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,240,253,237,154,18,0,0,0,254,245,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,207,253,162,58,0,0,0,0,0,178,253,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,254,183,8,0,0,0,0,0,0,97,254,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,253,226,125,118,118,80,118,118,80,149,253,158,27,20,8,0,7,20,12,0,0,0,0,0,0,0,0,127,253,253,253,253,254,253,253,253,253,254,253,253,253,253,206,175,199,253,155,0,0,0,0,0,0,0,0,5,19,49,117,191,177,206,117,79,153,186,253,225,197,237,19,176,117,117,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,253,182,39,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,230,223,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,239,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);
// console.log(res);
//
// process.exit();

function makeLabel(val) {
  const label = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  label[val] = 1;
  return label;
}

function predToInt(vals) {
  let max = 0;
  let maxIndex = 0;
  vals.forEach((val, index) => {
    if (val > max) {
      max = val;
      maxIndex = index;
    }
  });
  return maxIndex;
}

function scaleRow(data, div = 255){
  return data.map(val => val / div);
}

/**
 *
 * @param {Object<string, number>} obj Keys are labels and values are predicted probability
 */
function findMax(obj) {
  let max = -Infinity;
  let maxKey = null;

  for (let k in obj) {
    if (obj[k] > max) {
      max = obj[k];
      maxKey = k;
    }
  }

  return maxKey;
}

// TODO: train each file individually
fs.readFile('./data/train.csv', (err, data) => {
  if (err) {
    throw err;
  }

  const file = data.toString().split('\n');
  const x = [];
  const testX = [];

  file.forEach((row, i) => {
    if (i > 0 && i < MAX_SAMPLES + MAX_TESTS + 1) {
      let data = row.split(',').map(val => Number(val));
      let label = data.splice(0, 1).map(val => Number(val));
      label = makeLabel(label).indexOf(1);

      // data = scaleRow(data);
      data = { input: data, output: { [label]: 1 }};

      if (i < MAX_SAMPLES + 1) {
        x.push(data);
      } else {
        testX.push([data.input, label]);
      }
    }
  });

  const net = new brain.NeuralNetwork({
    // hiddenLayers: [784]
  });
  net.train(x, { log: 1 });

  console.error(JSON.stringify(net.toJSON(), null, 2));

  let correct = 0;
  let wrong = 0;
  testX.forEach(([input, expected]) => {
    const prediction = net.run(input);
    const digit = findMax(prediction);
    console.log(`Input: ${input}`);
    console.log(`Expected Prediction: ${expected}`);
    console.log(`Prediction: ${JSON.stringify(prediction, null, 2)}`);
    console.log(`Result : ${digit}`);
    process.exit();
    if (digit == expected) {
      correct += 1;
    } else {
      wrong += 1;
    }
  });

  console.log(`Success: ${parseInt(correct / testX.length * 100, 10)}%  (${correct}/${testX.length})`);
});
